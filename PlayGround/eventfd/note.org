



** eventfd用法

#+BEGIN_SRC c
#include <sys/eventfd.h>
int eventfd(unsigned int initval, int flags);
#+END_SRC

#+BEGIN_SRC c
#include <unistd.h>
ssize_t read(int fd, void* buf, size_t count);
#+END_SRC

*** close-on-exec flag
https://blog.csdn.net/justmeloo/article/details/40184039
在fork或execve时，子进程不会继承父进程打开的文件描述符，由于在linux系统中所有对象都是文件，这些文件描述符可以是socket，


*** 如何使用select完成eventfd的读写
#+BEGIN_QUOTE
Select Law
Many people who try to use select() come across behavior that is difficult to understand and produces non-portable or borderline results.  For instance, the  above program  is  carefully  written  not  to block at any point, even though it does not set its file descriptors to non-blocking mode. It is easy to introduce subtle errors that will remove the advantage of using select(), so here is a list of essentials to watch for when using select().

1.  You should always try to use select() without a timeout.  Your program should have nothing to do if there is no data available.  Code that depends on  timeouts is not usually portable and is difficult to debug.

2.  The value nfds must be properly calculated for efficiency as explained above.

3.  No file descriptor must be added to any set if you do not intend to check its result after the select() call, and respond appropriately.  See next rule.

4.  After select() returns, all file descriptors in all sets should be checked to see if they are ready.

5.  The functions read(2), recv(2), write(2), and send(2) do not necessarily read/write the full amount of data that you have requested.  If they do read/write the full amount, it’s because you have a low traffic load and a fast stream.  This is not always going to be the case.  You should cope with the case of your functions only managing to send or receive a single byte.

6.  Never read/write only in single bytes at a time unless you are really sure that you have a small amount of data to process.  It is extremely inefficient not to read/write as much data as you can buffer each time.  The buffers in the example below are 1024 bytes although they could easily be made larger.

7.  The functions read(2), recv(2), write(2), and send(2) as well as the select() call can return -1 with errno set to EINTR, or with errno set to EAGAIN  (EWOULDBLOCK).   These  results must be properly managed (not done properly above).  If your program is not going to receive any signals, then it is unlikely you will get EINTR.  If your program does not set non-blocking I/O, you will not get EAGAIN.

8.  Never call read(2), recv(2), write(2), or send(2) with a buffer length of zero.

9.  If the functions read(2), recv(2), write(2), and send(2) fail with errors other than those listed in 7., or one of the input functions  return 0,  indicating end  of  file,  then you should not pass that descriptor to select() again.  In the example below, I close the descriptor immediately, and then set it to -1 to prevent it being included in a set.

10. The timeout value must be initialized with each new call to select(), since some operating systems modify the structure.  pselect() however does not modify its timeout structure.

11. Since select() modifies its file descriptor sets, if the call is being used in a loop, then the sets must be re-initialized before each call.

#+END_QUOTE


poll select epoll

io复用技术 pselect ppol epoll






*** 为什么select经常与非阻塞io放在一起使用
select能够监视多个 *阻塞io* 的状态，在他们任意一个出现可读或可写时返回。
但是select与非阻塞io配合使用的原因在于read或write时不会出现阻塞，这样在能够顺利进入下一个select调用，进行多个io的监视。



** 如何使用eventfd实现一个定时器


** 在windows下如何实现一个类似eventfd的功能





